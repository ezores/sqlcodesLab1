Emprunt de films:

Règles de validation :
Il doit y avoir au moins une copie disponible du film sélectionné dans l'inventaire
Le client ne doit pas dépasser la limite de Emprunt spécifiée par son plan d'abonnement
Chaque Emprunt doit mettre à jour l'inventaire pour refléter la copie prêtée
Comportement attendu:
Si les conditions ci-dessus ne sont pas remplies, le système doit afficher un message d'erreur significatif
Si la Emprunt réussit:
Une copie du film est envoyée au client
L'inventaire est mis à jour

1. SP Louer un film:
CREATE OR REPLACE PROCEDURE p_louerFilm(
    p_nomUsager      IN NUMBER,
    p_filmId        IN NUMBER,
    p_resultat      OUT VARCHAR2
) AS
    v_copiesDispo   NUMBER;
    v_nbEmprunts   NUMBER;
    v_maxEmprunts  NUMBER;
    v_copieId  NUMBER;
BEGIN
    -- Step 1: Check if there are available copies of the movie
    SELECT copieId
    INTO v_copieId
    FROM CopieFilm
    WHERE filmId = p_filmId AND statut = 'disponible'
    FETCH FIRST 1 ROWS ONLY;

    -- Step 2: Check the number of active rentals for the client
    SELECT COUNT(*)
    INTO v_nbEmprunts
    FROM Emprunt
    WHERE nomUsager = p_nomUsager AND statut = 'prêté';

    -- Step 3: Get the rental limit for the client's subscription plan
    SELECT EmpruntMax
    INTO v_maxEmprunts
    FROM Abonnement
    WHERE codeAbonnement = (SELECT codeAbonnement FROM Client WHERE nomUsager = p_nomUsager);

    -- Step 4: Validate the client's rental limit
    IF v_nbEmprunts >= v_maxEmprunts THEN
        p_resultat := 'Limite de Emprunt atteinte pour ce client.';
        RETURN;
    END IF;

    -- Step 5: Update inventory and record the rental
    UPDATE CopieFilm
    SET statut = 'prêté'
    WHERE copieId = v_copieId;

    INSERT INTO Emprunt (nomUsager, copieId, dateDebutEmprunt, statut)
    VALUES (p_nomUsager, v_copieId, SYSDATE, 'prêté');

    p_resultat := 'Emprunt réussie. Copie envoyée.';
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_resultat := 'Aucune copie disponible pour ce film.';
    WHEN OTHERS THEN
        ROLLBACK;
        p_resultat := 'Erreur inattendue lors de la Emprunt.';
END;


TEST #1 (Emprunt Succes):
DECLARE
    v_resultat VARCHAR2(100);
BEGIN
    p_louerFilm(1, 10, v_resultat); -- Replace 1 with a valid client ID and 10 with a valid film ID
    DBMS_OUTPUT.PUT_LINE(v_resultat);
END;


Expected Result: Emprunt réussie. Copie envoyée.


TEST #2 (Pas de copies disponible):
DECLARE
    v_resultat VARCHAR2(100);
BEGIN
    p_louerFilm(1, 99, v_resultat); -- Film ID 99 has no available copies
    DBMS_OUTPUT.PUT_LINE(v_resultat);
END;


Expected Result: Aucune copie disponible pour ce film.


TEST #3 (Limite atteinte):
DECLARE
    v_resultat VARCHAR2(100);
BEGIN
    p_louerFilm(2, 10, v_resultat); -- Client ID 2 has already reached their rental limit
    DBMS_OUTPUT.PUT_LINE(v_resultat);
END;


Expected Result: Limite de Emprunt atteinte pour ce client.


FULL SCRIPT:

-- Constraints
ALTER TABLE CopieFilm
ADD CONSTRAINT fk_exemplaire_film FOREIGN KEY (filmId) REFERENCES Film(filmId);

ALTER TABLE Emprunt
ADD CONSTRAINT fk_Emprunt_client FOREIGN KEY (nomUsager) REFERENCES Client(nomUsager);

ALTER TABLE CopieFilm
ADD CONSTRAINT chk_statut CHECK (statut IN ('disponible', 'prêté'));

ALTER TABLE Emprunt
ADD CONSTRAINT chk_statut CHECK (statut IN ('prêté', 'terminée'));

-- Stored Procedure
CREATE OR REPLACE PROCEDURE p_louerFilm(
    p_nomUsager      IN NUMBER,
    p_filmId        IN NUMBER,
    p_resultat      OUT VARCHAR2
) AS
    v_copiesDispo   NUMBER;
    v_nbEmprunts   NUMBER;
    v_maxEmprunts  NUMBER;
    v_copieId  NUMBER;
BEGIN
    SELECT copieId
    INTO v_copieId
    FROM CopieFilm
    WHERE filmId = p_filmId AND statut = 'disponible'
    FETCH FIRST 1 ROWS ONLY;

    SELECT COUNT(*)
    INTO v_nbEmprunts
    FROM Emprunt
    WHERE nomUsager = p_nomUsager AND statut = 'prêté';

    SELECT EmpruntMax
    INTO v_maxEmprunts
    FROM Abonnement
    WHERE codeAbonnement = (SELECT codeAbonnement FROM Client WHERE nomUsager = p_nomUsager);

    IF v_nbEmprunts >= v_maxEmprunts THEN
        p_resultat := 'Limite de Emprunt atteinte pour ce client.';
        RETURN;
    END IF;

    UPDATE CopieFilm
    SET statut = 'prêté'
    WHERE copieId = v_copieId;

    INSERT INTO Emprunt (nomUsager, copieId, dateDebutEmprunt, statut)
    VALUES (p_nomUsager, v_copieId, SYSDATE, 'prêté');

    p_resultat := 'Emprunt réussie. Copie envoyée.';
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_resultat := 'Aucune copie disponible pour ce film.';
    WHEN OTHERS THEN
        ROLLBACK;
        p_resultat := 'Erreur inattendue lors de la Emprunt.';
END;
